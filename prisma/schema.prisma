// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// User, Task, Message models remain as you provided...

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  tasks         Task[]    @relation("UserTasks")
  assignedTasks Task[]    @relation("AssignedTasks")
  messagesSent  Message[] @relation("UserSentMessages") // Explicit relation name
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Task {
  id            String    @id @default(cuid())
  title         String
  status        String    @default("Logged")
  priority      String?
  tags          String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  requestedById String
  requestedBy   User      @relation("UserTasks", fields: [requestedById], references: [id])
  assignedToId  String?
  assignedTo    User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  messages      Message[] @relation("TaskMessages") // Explicit relation name
  @@index([requestedById])
  @@index([assignedToId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender    User     @relation("UserSentMessages", fields: [senderId], references: [id]) // Matching explicit name
  senderId  String   // Foreign key to User
  
  task      Task     @relation("TaskMessages", fields: [taskId], references: [id], onDelete: Cascade) // Matching explicit name, added onDelete
  taskId    String   // Foreign key to Task

  parentId  String?
  parent    Message? @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Message[] @relation("Replies")

  @@index([senderId])
  @@index([taskId])
  @@index([parentId])
}

// Models to be modified for semantic search
model RealTask {
  id          String   @id @default(cuid())
  name        String
  description String?
  tags        String[]
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  realMessages RealMessage[]

  // Vector field for RealTask content (name + description + tags)
  embedding   Unsupported("vector(384)")? // For all-MiniLM-L6-v2 (384 dimensions)

  @@index([category])
  // pgvector index will be created manually in a migration
  // Example placeholder for Prisma, actual index via SQL:
  // @@index([embedding], map: "idx_realtask_embedding", type: Ivfflat)
}

model RealMessage {
  id        String   @id @default(cuid())
  content   String
  senderId  String   // Assuming this ID might not directly link to your User model, or could be a generic string ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  realTask   RealTask @relation(fields: [realTaskId], references: [id], onDelete: Cascade)
  realTaskId String

  parentId   String?
  parent     RealMessage? @relation("RealReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    RealMessage[] @relation("RealReplies")

  // Vector field for RealMessage content
  embedding  Unsupported("vector(384)")? // For all-MiniLM-L6-v2

  @@index([senderId])
  @@index([realTaskId])
  @@index([parentId])
  // pgvector index will be created manually in a migration
  // Example placeholder for Prisma, actual index via SQL:
  // @@index([embedding], map: "idx_realmessage_embedding", type: Ivfflat)
}