// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String    @id @default(cuid())
  email     String    @unique // Essential for our simplified login
  name      String?
  tasks     Task[]    @relation("UserTasks")      // Tasks requested by this user
  assignedTasks Task[] @relation("AssignedTasks") // Tasks assigned to this user
  messages  Message[] // We'll use this in Phase 2
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Task {
  id          String    @id @default(cuid())
  title       String
  status      String    @default("Logged") // e.g., Logged, Ongoing, Reviewed, Done, Blocked [cite: 1]
  priority    String?   // e.g., High, Medium, Low
  tags        String[]  // Array of strings for tags [cite: 1]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  requestedById String
  requestedBy User      @relation("UserTasks", fields: [requestedById], references: [id]) // User who requested it [cite: 1]

  assignedToId String?
  assignedTo  User?     @relation("AssignedTasks", fields: [assignedToId], references: [id]) // Assigned operator [cite: 1]

  messages    Message[] // We'll use this in Phase 2

  @@index([requestedById])
  @@index([assignedToId])
}



model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])

  @@index([userId])
  @@index([taskId])
}
